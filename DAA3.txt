#include<bits/stdc++.h>
using namespace std;
using namespace std::chrono;


struct Item
{
    int weight;
    int val;
    
    Item(int weight,int val)
    {
        this->val=val;
        this->weight=weight;
    }
};

bool cmp(struct Item a, struct Item b)
{
    double r1=(double)a.val/(double)a.weight;
    double r2=(double)b.val/(double)b.weight;
    return r1>r2;
    
}

double fractionalKnapsack(int W,struct Item ar[],int N)
{
    sort(ar,ar+N,cmp);
    
    double finalval=0.0;
    
    for(int i=0;i<N;i++)
    {
    if(ar[i].weight<=W)
    {
        W-=ar[i].weight;
        finalval+=ar[i].val;
        
    }
    else
    {
        finalval+=ar[i].val * ((double)W / (double)ar[i].weight );
        break;
    }
    }
    return finalval;
}
int main()
{
    
    Item ar[]={{10,60},{20,100},{30,120}};
    int W=50;
    int N=sizeof(ar)/sizeof(ar[0]);
    auto start = high_resolution_clock::now();

    double max_val = fractionalKnapsack(W,ar,N);
    cout<<"Maximum total value in the knapsack : "<<max_val<<endl;
    auto stop = high_resolution_clock::now();
			auto duration = duration_cast<microseconds>(stop - start);
			cout << "Time taken by function: "
         << duration.count() << " microseconds" << endl;

    return 0;
}
